import { Telegraf, Context, Input } from 'telegraf';
import {
  BUTTONS,
  mainMenuKeyboard,
  aboutInlineKeyboard,
  returnInlineButton
} from '../keyboards/mainMenu';
import { PDF, PHOTO, VIDEO } from '../media/links';
import { standardsMenuKeyboard } from '../keyboards/standards';
import { generateRemindersKeyboard } from '../pagination/pagination';

const greetingText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–∏–π –±–æ—Ç –ê–∫–∞–¥–µ–º–∏–∏ –î–æ–ª–≥–æ–ª–µ—Ç–∏—è! üéâ –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –∑–¥–µ—Å—å. –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –í–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø–∞–Ω—Å–∏–æ–Ω–∞—Ç–∞—Ö. –í–∞—à –æ–ø—ã—Ç –∏ –∑–Ω–∞–Ω–∏—è ‚Äî —ç—Ç–æ –∑–∞–ª–æ–≥ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ —Å—á–∞—Å—Ç—å—è –Ω–∞—à–∏—Ö¬†–ø–æ—Å—Ç–æ—è–ª—å—Ü–µ–≤!üòä';

const { REMINDERS } = PDF;

export function setupHandlers(bot: Telegraf<Context>) {
  bot.start((ctx) => {
    ctx.reply(greetingText, mainMenuKeyboard);
  });

  bot.hears(BUTTONS.ABOUT, (ctx) => {
    ctx.reply('–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ–¥–∏–∞–º–∞—Ç–µ—Ä–∏–∞–ª—ã, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏', aboutInlineKeyboard);
  });

  bot.hears(BUTTONS.STANDARDS, async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:', standardsMenuKeyboard);
  });

  bot.hears(BUTTONS.FRIENDS, async (ctx) => {
    await ctx.replyWithPhoto(Input.fromURL(PHOTO.FRIENDS));
     ctx.reply('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω—é', returnInlineButton)
  });

  bot.action('video_about_company', async (ctx) => {
    ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞..');
    await ctx.replyWithVideo(Input.fromURL(VIDEO.ABOUT));
  });

  bot.action('mission', async (ctx) => {
    ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞..');
    await ctx.replyWithDocument(Input.fromURL(PDF.MISSION));
    await ctx.reply('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω—é', returnInlineButton)
  });

  bot.action('return_button', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', mainMenuKeyboard);
  });

  bot.action('reminders_button', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–∞–º—è—Ç–∫—É:', generateRemindersKeyboard(0));
});

bot.action(/^reminder_page_(\d+)$/, async (ctx) => {
  const page = parseInt(ctx.match[1], 10);
  await ctx.answerCbQuery();
  await ctx.editMessageReplyMarkup(generateRemindersKeyboard(page).reply_markup);
});

bot.action(/^reminder_(\d+)$/, async (ctx) => {
  const id = parseInt(ctx.match[1], 10);
  const reminder = REMINDERS.find((r) => r.id === id);

  if (reminder) {
    await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–º—è—Ç–∫–∏...');
    await ctx.replyWithDocument({ url: reminder.url, filename: reminder.name + '.pdf' });
    await ctx.reply('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω—é', returnInlineButton)
  } else {
    await ctx.answerCbQuery('–ü–∞–º—è—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
});
}
